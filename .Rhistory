#
# Returns:
#   Data frame containing volume information.
volumes <- tweets[grepl("\\d+ ?ml", tweets$text) & !grepl(kIgnoreTweet, tweets$text), ]
volumes$volume <- as.numeric(str_match(volumes$text, "(\\d+) ?ml")[, 2])
volumes$milktype <- rep("formula", nrow(volumes))
volumes$milktype[grep("bm|breast", volumes$text)] <- "breast"
volumes
}
GetVolumeSumByDate <- function(volumes, dt) {
# Extract volume info for a specific date or date range.
#
# Args:
#   volumes: Volume data frame.
#   dt: Date or date range to extract details for.
#
# Returns:
#   Data frame containing volume information for a specific date or date range.
result <- sapply(dt, function(x) {
lower <- volumes$created - x >= 0
upper <- volumes$created - (x + 86400) < 0
sum(volumes[lower & upper, "volume"])
})
names(result) <- dt
result
}
GetVolumeSumByDays <- function(volumes, n = 1) {
# Extract volume info for a specific number of days in the past.
#
# Args:
#   volumes: Volume data frame.
#   n: Number of days (default: 1).
#
# Returns:
#   Data frame containing volume information for a specific number of days in the past.
today <- as.POSIXct(as.character(Sys.Date()))
GetVolumeSumByDate(volumes,
seq.POSIXt(from = today - ((n - 1) * 86400),
to = today,
by = "days"))
}
GetVolumeMilkTypeSumByDate <- function(volumes, dt, milktype) {
# Extract milk type info for a specific date or date range.
#
# Args:
#   volumes: Volume data frame.
#   dt: Date or date range to extract details for.
#
# Returns:
#   Data frame containing milk type information for a specific date or date range.
result <- sapply(dt, function(x) {
lower <- volumes$created - x >= 0
upper <- volumes$created - (x + 86400) < 0
sum(volumes[lower & upper & volumes$milktype == milktype, "volume"])
})
names(result) <- dt
result
}
GetVolumeMilkTypeSumByDays <- function(volumes, n = 1, milktype) {
# Extract milk type info for a specific number of days in the past.
#
# Args:
#   volumes: Volume data frame.
#   n: Number of days (default: 1).
#
# Returns:
#   Data frame containing milk type information for a specific number of days in the past.
today <- as.POSIXct(as.character(Sys.Date()))
GetVolumeMilkTypeSumByDate(volumes,
seq.POSIXt(from = today - ((n - 1) * 86400),
to = today,
by = "days"),
milktype)
}
ExtractKeyword <- function(tweets, keyword) {
# Extract data with keyword from tweet data frame.
#
# Args:
#   tweets: Tweet data frame.
#   keyword: Keyword to search for.
#
# Returns:
#   Data frame of tweets containing keyword.
tweets[grepl(keyword, tweets$text) & !grepl(kIgnoreTweet, tweets$text), ]
}
GetNumKeywordsByDate <- function(dataset, dt) {
# Extract number of keywords for a specific date or date range.
#
# Args:
#   dataset: Keyword data frame.
#   dt: Date or date range to extract details for.
#
# Returns:
#   Data frame containing keyword for a specific date or date range.
result <- sapply(dt, function(x) {
lower <- dataset$created - x >= 0
upper <- dataset$created - (x + 86400) < 0
nrow(dataset[lower & upper, ])
})
names(result) <- dt
result
}
GetNumKeywordsByDays <- function(dataset, n = 1) {
# Extract keyword info for a specific number of days in the past.
#
# Args:
#   volumes: Keyword data frame.
#   n: Number of days (default: 1).
#
# Returns:
#   Data frame containing keyword information for a specific number of days in the past.
today <- as.POSIXct(as.character(Sys.Date()))
GetNumKeywordsByDate(dataset,
seq.POSIXt(from = today - ((n - 1) * 86400),
to = today,
by = "days"))
}
consumerKey <- "5CMLaLXybPuWxFAZjkF4F2kAa"
consumerSecret <- "CRlXBGEsyGMIRoQXgV57W8CloYZnyTTHt0bWuammW31t7vE7N2"
accessToken <- "287380276-5YbMFS2TzKaierpQsbrHehy25bbjMpsGvaNyxgJy"
accessTokenSecret <- "NlYIlEKMKTeT7Qa1f33T31TIEwqo6xXDFmE6PUiJPIPpr"
handle <- "billzichos"
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessTokenSecret)
tweets <- GetTweets(handle, 100)
volumes <- ExtractVolumes(tweets)
GetVolumeSumByDays(volumes, 4)
round(GetVolumeMilkTypeSumByDays(volumes, 4, "breast") / GetVolumeSumByDays(volumes, 4) * 100)
pumps <- ExtractKeyword(tweets, "pump")
GetNumKeywordsByDays(pumps, 4)
poops <- ExtractKeyword(tweets, "poop")
GetNumKeywordsByDays(poops, 4)
pees <- ExtractKeyword(tweets, "pee")
GetNumKeywordsByDays(pees, 4)
tweets
bge.list <- searchTwitter('@MyBGE', n=1000, cainfo="cacert.pem")
bge.list <- searchTwitter('@MyBGE', n=1000)
bge.list
getwd()
file("test.ics")
f <- file("test.ics")
writeLines("line1",f)
close f
close(f)
f <- file("test.ics")
writeLines("line 2 hello world", f)
close(f)
writeLines(c('line 1','line 2 hello world'), f)
f <- file("test.ics")
writeLines(c('line 1','line 2 hello world'), f)
close(f)
subject <- 'test subject'
line1 <- 'BEGIN:VCALENDAR'
line2 <- 'VERSION:2.0'
line3 <- 'BEGIN:VEVENT'
line4 <- paste('SUMMARY:', subject, sep='')
line5 <- 'END:VEVENT'
line6 <- 'END:VCALENDAR'
f <- file("test.ics")
writeLines(c(line1, line2, line3, line4, line5, line6), f)
close(f)
line01 <- 'BEGIN:VCALENDAR'
line02 <- 'VERSION:2.0'
line03 <- 'PRODID:'
line04 <- 'BEGIN:VEVENT'
line05 <- 'UID:'
line06 <- 'DTSTAMP:20150530T170000Z'
line07 <- 'ORGANIZER;CN=Bill Zichos:MAILTO:billzichos@hotmail.com'
line08 <- 'DTSTART:20150530T170000Z'
line09 <- 'DTEND:20150530T180000Z'
line10 <- 'SUMMARY:[enter subject here]'
line11 <- 'DESCRIPTION:[enter description here]'
line12 <- 'END:VEVENT'
line13 <- 'END:VCALENDAR'
f <- file("test.ics")
writeLines(
c(line01, line02, line03, line04, line05, line06, line07, line08, line09, line10, line11, line12, line13),
f)
close(f)
line01 <- 'BEGIN:VCALENDAR'
line02 <- 'VERSION:2.0'
line03 <- 'PRODID:'
line04 <- 'BEGIN:VEVENT'
line05 <- 'UID:bill.zichos'
line06 <- 'DTSTAMP:20150530T170000Z'
line07 <- 'ORGANIZER;CN=Bill Zichos:MAILTO:billzichos@hotmail.com'
line08 <- 'DTSTART:20150530T170000Z'
line09 <- 'DTEND:20150530T180000Z'
line10 <- 'SUMMARY:[enter subject here]'
line11 <- 'DESCRIPTION:[enter description here]'
line12 <- 'END:VEVENT'
line13 <- 'END:VCALENDAR'
f <- file("test.ics")
writeLines(
c(line01, line02, line03, line04, line05, line06, line07, line08, line09, line10, line11, line12, line13),
f)
close(f)
line03 <- 'PRODID:R'
line01 <- 'BEGIN:VCALENDAR'
line02 <- 'VERSION:2.0'
line03 <- 'PRODID:R'
line04 <- 'BEGIN:VEVENT'
line05 <- 'UID:bill.zichos'
line06 <- 'DTSTAMP:20150530T170000Z'
line07 <- 'ORGANIZER;CN=Bill Zichos:MAILTO:billzichos@hotmail.com'
line08 <- 'DTSTART:20150530T170000Z'
line09 <- 'DTEND:20150530T180000Z'
line10 <- 'SUMMARY:[enter subject here]'
line11 <- 'DESCRIPTION:[enter description here]'
line12 <- 'END:VEVENT'
line13 <- 'END:VCALENDAR'
f <- file("test.ics")
writeLines(
c(line01, line02, line03, line04, line05, line06, line07, line08, line09, line10, line11, line12, line13),
f)
close(f)
f <- file("test.ics")
writeLines(c(line01 <- 'BEGIN:VCALENDAR'
line02 <- 'VERSION:2.0'
line03 <- 'PRODID:R'
line04 <- 'BEGIN:VEVENT'
line05 <- 'UID:bill.zichos'
line06 <- 'DTSTAMP:20150530T170000Z'
line07 <- 'ORGANIZER;CN=Bill Zichos:MAILTO:billzichos@hotmail.com'
line08 <- 'DTSTART:20150530T170000Z'
line09 <- 'DTEND:20150530T180000Z'
line10 <- paste('SUMMARY:', subject, sep='')
line11 <- paste('DESCRIPTION:', description, sep='')
line12 <- 'END:VEVENT'
line13 <- 'END:VCALENDAR'
), f)
close(f)
description <- '[enter description here]'
f <- file("test.ics")
writeLines(c(line01 <- 'BEGIN:VCALENDAR'
line02 <- 'VERSION:2.0'
line03 <- 'PRODID:R'
line04 <- 'BEGIN:VEVENT'
line05 <- 'UID:bill.zichos'
line06 <- 'DTSTAMP:20150530T170000Z'
line07 <- 'ORGANIZER;CN=Bill Zichos:MAILTO:billzichos@hotmail.com'
line08 <- 'DTSTART:20150530T170000Z'
line09 <- 'DTEND:20150530T180000Z'
line10 <- paste('SUMMARY:', subject, sep='')
line11 <- paste('DESCRIPTION:', description, sep='')
line12 <- 'END:VEVENT'
line13 <- 'END:VCALENDAR'
), f)
close(f)
f <- file("test.ics")
writeLines(c(line01 <- 'BEGIN:VCALENDAR',
line02 <- 'VERSION:2.0',
line03 <- 'PRODID:R',
line04 <- 'BEGIN:VEVENT',
line05 <- 'UID:bill.zichos',
line06 <- 'DTSTAMP:20150530T170000Z',
line07 <- 'ORGANIZER;CN=Bill Zichos:MAILTO:billzichos@hotmail.com',
line08 <- 'DTSTART:20150530T170000Z',
line09 <- 'DTEND:20150530T180000Z',
line10 <- paste('SUMMARY:', subject, sep=''),
line11 <- paste('DESCRIPTION:', description, sep=''),
line12 <- 'END:VEVENT',
line13 <- 'END:VCALENDAR'
), f)
close(f)
f <- file("test.ics")
writeLines(c(line01 <- 'BEGIN:VCALENDAR',
line02 <- 'VERSION:2.0',
line03 <- 'PRODID:R',
line04 <- 'BEGIN:VEVENT',
line05 <- 'UID:bill.zichos',
line06 <- 'DTSTAMP:20150530T000000',
line07 <- 'ORGANIZER;CN=Bill Zichos:MAILTO:billzichos@hotmail.com',
line08 <- 'DTSTART:20150530T000000',
line09 <- 'DTEND:20150531T000000',
line10 <- paste('SUMMARY:', subject, sep=''),
line11 <- paste('DESCRIPTION:', description, sep=''),
line12 <- 'END:VEVENT',
line13 <- 'END:VCALENDAR'
), f)
close(f)
today()
system.time()
date()
month(date())
#Week 2 Quiz
library("httr")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
myapp <- oauth_app("github",
key = "b278d64147503fcd381b",
secret = "b98c9972b60884be3cf4c187bd24dc6cc783b315")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library("ggplot2")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth(methods("lm"))
help(grep)
grep("[0:9]{6} Block of ")
rex <- "1500 Block of OAK ST"
grep("[0:9]{6} Block of ", rex)
grepl("[0:9]{6} Block of ", rex)
regex("[0:9]{6} Block of ", rex)
regexpr("[0:9]{6} Block of ", rex)
gregexpr("[0:9]{6} Block of ", rex)
gregexpr("[0:9]{3} Block of ", rex)
gregexpr("1500 Block of ", rex)
grep("[0:9]{6} Block of ", rex)
grepl("[0:9]{6} Block of ", rex)
grep("[1500 Block of ", rex)
grep("1500 Block of ", rex)
grepl("1500 Block of ", rex)
regexpr("1500 Block of ", rex)
gregexpr("1500 Block of ", rex)
gregexpr("[0-9]{1,} Block of ", rex)
grep("[0-9]{1,} Block of ", rex)
grepl("[0-9]{1,} Block of ", rex)
grep("^[0:9]{1,6} Block of ", df$Address)
sapply(df$Address, grepl("^[0-9]{1,6} Block of "))
sapply(df$Address, grepl("^[0-9]{1,6} Block of "), x = df$Address)
help(if)
??if
---
#Update the periodic snapshot with Results if known
library(dplyr)
# setwd("~/Private-Github-Files")
# specify the snapshot file to update with actual results
snapshotFilename <- "OpenDeals20150508.csv"
# import the actual results
results <- read.csv("~//Private-Github-Files//results.csv")
# str(results)
# import the point-in-time snapshot
snapshot <- read.csv(paste("~//Private-Github-Files//", snapshotFilename, sep =""))
# str(snapshot)
# summary(snapshot)
# merge the snapshot and results files, creating a single dataset
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
# summary(comb)
# str(comb)
# update the closedsaswon field based on the value in the status field.
comb$ClosedAsWon[comb$Status=="Lost"] <- 0
comb$ClosedAsWon[comb$Status=="Won"] <- 1
# add only the fields from the snapshot dataset to the final dataset.
completeDataset <- select(comb, 1:21)
# str(completeDataset)
# str(completeDataset$ClosedAsWon)
# summary(completeDataset)
# summary(completeDataset$ClosedAsWon)
# overwrite the orginal snapshot file
write.csv(completeDataset,paste("~//Private-Github-Files//",snapshotFilename, sep = ""), row.names = FALSE)
#Update the periodic snapshot with Results if known
library(dplyr)
# setwd("~/Private-Github-Files")
# specify the snapshot file to update with actual results
snapshotFilename <- "OpenDeals20150601.csv"
# import the actual results
results <- read.csv("~//Private-Github-Files//results.csv")
# str(results)
# import the point-in-time snapshot
snapshot <- read.csv(paste("~//Private-Github-Files//", snapshotFilename, sep =""))
# str(snapshot)
# summary(snapshot)
# merge the snapshot and results files, creating a single dataset
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
# summary(comb)
# str(comb)
# update the closedsaswon field based on the value in the status field.
comb$ClosedAsWon[comb$Status=="Lost"] <- 0
comb$ClosedAsWon[comb$Status=="Won"] <- 1
# add only the fields from the snapshot dataset to the final dataset.
completeDataset <- select(comb, 1:21)
# str(completeDataset)
# str(completeDataset$ClosedAsWon)
# summary(completeDataset)
# summary(completeDataset$ClosedAsWon)
# overwrite the orginal snapshot file
write.csv(completeDataset,paste("~//Private-Github-Files//",snapshotFilename, sep = ""), row.names = FALSE)
#Update the periodic snapshot with Results if known
library(dplyr)
# setwd("~/Private-Github-Files")
# specify the snapshot file to update with actual results
snapshotFilename <- "OpenDeals20150804.csv"
# import the actual results
results <- read.csv("~//Private-Github-Files//results.csv")
# str(results)
# import the point-in-time snapshot
snapshot <- read.csv(paste("~//Private-Github-Files//", snapshotFilename, sep =""))
# str(snapshot)
# summary(snapshot)
# merge the snapshot and results files, creating a single dataset
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
# summary(comb)
# str(comb)
# update the closedsaswon field based on the value in the status field.
comb$ClosedAsWon[comb$Status=="Lost"] <- 0
comb$ClosedAsWon[comb$Status=="Won"] <- 1
# add only the fields from the snapshot dataset to the final dataset.
completeDataset <- select(comb, 1:21)
# str(completeDataset)
# str(completeDataset$ClosedAsWon)
# summary(completeDataset)
# summary(completeDataset$ClosedAsWon)
# overwrite the orginal snapshot file
write.csv(completeDataset,paste("~//Private-Github-Files//",snapshotFilename, sep = ""), row.names = FALSE)
df <- read.csv("application_event_logs.csv", header = FALSE, skip = 1, nrows = 2,
col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"),
colClasses = c("character", "character", "character", "integer", "character"))
setwd("~/GitHub/Visualizing-Event-Logs-on-a-Time-Map")
df <- read.csv("application_event_logs.csv", header = FALSE, skip = 1, nrows = 2,
col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"),
colClasses = c("character", "character", "character", "integer", "character"))
View(df)
help(POSIXlt)
df$DateTime <- as.POSIXlt(df$DateTime)
df <- read.csv("application_event_logs.csv", header = FALSE, skip = 1, nrows = 2,
col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"),
colClasses = c("character", "character", "character", "integer", "character"))
df$DateTime <- as.POSIXlt(df$DateTime, tz = "EST", format = "%m/%d/%Y %H:%M:%S %p")
df <- read.csv("application_event_logs.csv", header = FALSE, skip = 1,
col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"),
colClasses = c("character", "character", "character", "integer", "character"))
df <- read.csv("application_event_logs.csv", header = FALSE, skip = 1,
col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"),
colClasses = c(, "character", "character", "integer", "character", "character"))
df <- read.csv("application_event_logs.csv", header = FALSE, skip = 1,
col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"),
colClasses = c("", "character", "character", "integer", "character", "character"))
df <- read.csv("application_event_logs.csv", header = FALSE, skip = 1,
col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"),
colClasses = c("character", "character", "character", "integer", "character", "character"))
help(as.factor)
df$Level <- as.factor(df$Level)
summary(df)
help(read.csv)
df <- read.csv("application_event_logs.csv", header = FALSE, skip = 1,
col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"),
colClasses = c("character", "character", "character", "integer", "character", "character"))
df$DateTime <- as.POSIXlt(df$DateTime, tz = "EST", format = "%m/%d/%Y %H:%M:%S %p")
df$Level <- as.factor(df$Level)
summary(df)
df <- read.csv("application_event_logs.csv", header = FALSE, skip = 1,
col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"),
colClasses = c("character", "character", "character", "integer", "character", "character"))
df$DateTime <- as.POSIXlt(df$DateTime, tz = "EST", format = "%m/%d/%Y %H:%M:%S %p")
df$Level <- as.factor(df$Level)
summary(df)
df <- read.csv("application_event_logs.csv", header = FALSE, skip = 1,
col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"),
colClasses = c("character", "character", "character", "integer", "character", "character"))
df$DateTime <- as.POSIXlt(df$DateTime, tz = "EST", format = "%m/%d/%Y %H:%M:%S %p")
df$Level <- as.factor(df$Level)
summary(df)
df <- read.csv("application_event_logs.csv", header = FALSE, skip = 1,
col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"),
colClasses = c("character", "character", "character", "integer", "character", "character"))
df$DateTime <- as.POSIXlt(df$DateTime, tz = "EST", format = "%m/%d/%Y %H:%M:%S %p")
df$Level <- as.factor(df$Level)
summary(df)
df[df$Level!="Information"|df$Level!="Warning"|df$Level!="Error",]
df[df$Level!="Information"|df$Level!="Warning"|df$Level!="Error",1:5]
df[df$Level!="Information" & df$Level!="Warning" & df$Level!="Error",1:5]
df <- read.csv("application_event_logs.csv", header = FALSE, skip = 1,
col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"),
colClasses = c("character", "character", "character", "integer", "character", "character")
sep = ",", quote = "\")
df <- read.csv("application_event_logs.csv", header = FALSE, skip = 1,
col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"),
colClasses = c("character", "character", "character", "integer", "character", "character")
sep = ",", quote = "\")
df$DateTime <- as.POSIXlt(df$DateTime, tz = "EST", format = "%m/%d/%Y %H:%M:%S %p")
df$Level <- as.factor(df$Level)
df <- read.csv("application_event_logs.csv", header = FALSE, skip = 1,
col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"),
colClasses = c("character", "character", "character", "integer", "character", "character"),
sep = ",", quote = "\")
df <- read.csv("application_event_logs.csv",
header = FALSE,
skip = 1,
col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"),
colClasses = c("character", "character", "character", "integer", "character", "character"),
sep = ",",
quote = "\"")
df <- read.csv("application_event_logs.csv", header = FALSE, skip = 1, col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"), colClasses = c("character", "character", "character", "integer", "character", "character"), sep = ",", quote = "\"")
df$DateTime <- as.POSIXlt(df$DateTime, tz = "EST", format = "%m/%d/%Y %H:%M:%S %p")
df$Level <- as.factor(df$Level)
df <- read.csv("application_event_logs.csv", header = FALSE, skip = 1, col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"), colClasses = c("character", "character", "character", "integer", "character", "character"), sep = ",", quote = "\"")
df$DateTime <- as.POSIXlt(df$DateTime, tz = "EST", format = "%m/%d/%Y %H:%M:%S %p")
df$Level <- as.factor(df$Level)
summary(df)
df <- read.csv("application_event_logs.csv", header = FALSE, skip = 1, col.names = c("Level", "DateTime", "Source", "EventID", "TaskCategory", "Description"), colClasses = c("character", "character", "character", "integer", "character", "character"), sep = ",", quote = "\"")
df$DateTime <- as.POSIXlt(df$DateTime, tz = "EST", format = "%m/%d/%Y %H:%M:%S %p")
df$Level <- as.factor(df$Level)
summary(df)
df[df$Level=="Details:",1:5]
